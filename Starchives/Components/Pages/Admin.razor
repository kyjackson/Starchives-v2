@page "/admin"
@layout MainLayout
@rendermode InteractiveServer

@using Google.Apis.Services
@using Google.Apis.YouTube.v3
@using Starchives.Components.Layout
@using Starchives.Components.Templates
@using Starchives.Facades.YouTube
@using Starchives.Models
@using System.Diagnostics
@using EFCore.BulkExtensions
@using Microsoft.EntityFrameworkCore
@using Serilog

@inject NavigationManager Navigation
@inject Microsoft.Extensions.Options.IOptions<Keys> Options
@inject Data.StarchivesContext DbContext
@inject IYouTubeApiFacade YouTubeApiFacade



@if (!_isAuthenticated)
{
	<div id="login-panel" class="p-4 mb-4 text-white bg-dark rounded-3">

		<h3>Admin Login</h3>

		<EditForm class="d-flex flex-row justify-content-center" FormName="adminLoginForm" Model="_loginModel" OnValidSubmit="HandleLogin">

			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="form-group">

				@if (!string.IsNullOrEmpty(_errorMessage))
				{
					<div class="alert alert-danger mx-auto">@_errorMessage</div>
				}

				<InputText id="password" class="form-control p-1 mb-3 col-3" type="password" @bind-Value="@_loginModel.Password" />

				<button id="login-button" class="btn btn-light btn-sm w-100" type="submit">
					<h5 id="login-button-label" class="heading-md">Login</h5>
				</button>

			</div>

		</EditForm>

	</div>
}
else
{
	<div id="admin-panel" class="d-flex bg-dark rounded-3 justify-content-between">
		<div id="updates-pane" class="d-flex flex-column col-2 p-4">
			<h4>DB Updates</h4>
			<div id="videos-pane" class="p-4 text-white">
				<h5>Videos</h5>
				<p>Last Update: TODO</p>
				@* button for updating videos *@
				<button id="button-update-videos" class="btn btn-light btn-sm" @onclick="UpdateVideos">
					<h5 id="button-update-videos-label" class="heading-md">Update</h5>
				</button>
				<br/>
			</div>

			<div id="captions-pane" class="p-4 text-white">
				<h5>Captions</h5>
				<p>Last Update: TODO</p>
				@* button for updating captions *@
				<button id="button-update-captions" class="btn btn-light btn-sm" @onclick="UpdateCaptions">
					<h5 id="button-update-captions-label" class="heading-md">Update</h5>
				</button>
				<br/>
			</div>

			<div id="docs-pane" class="p-4 text-white">
				<h5>Documents</h5>
				<p>Last Update: TODO</p>
				@* button for updating monthly reports and design docs *@
				<button id="button-update-docs" class="btn btn-light btn-sm" @onclick="UpdateDocuments">
					<h5 id="button-update-docs-label" class="heading-md">Update</h5>
				</button>
				<br/>
			</div>
		</div>

		<div class="divider vr py-4 my-4"></div>

		<div id="logs-pane" class="d-flex flex-column col-10 p-4">
			<h4>Logs</h4>
			@* Console component should handle all the logic for retrieving and displaying logs *@
			<Console />
		</div>
	</div>
}




@code {

	private bool _isAuthenticated = false;
	private LoginModel _loginModel = new();
	private string? _errorMessage;



	protected override void OnInitialized()
	{
		var adminPassword = Options.Value.AdminPassword;

		if (string.IsNullOrEmpty(adminPassword))
		{
			_errorMessage = "Admin password is not set.";
			return;
		}

		if (_isAuthenticated)
		{
			//await UpdateDb();
		}
	}



	/// <summary>
	/// Handles the login form submission for the admin console.
	/// </summary>
	private void HandleLogin()
	{
		Debug.Print($"Password Entered: {_loginModel.Password}");

		if (_loginModel.Password == Options.Value.AdminPassword)
		{
			_isAuthenticated = true;
			_errorMessage = string.Empty;
		}
		else
		{
			_errorMessage = "Invalid password.";
		}
	}



	/// <summary>
	/// Retrieves all videos from the Star Citizen YouTube channel, then updates existing videos and inserts new videos into the Starchives database.
	/// </summary>
	/// <returns></returns>
	private async Task UpdateVideos()
	{
		var startTime = DateTime.Now;

		// 1. authenticate to the YouTube API
		var youtubeService = YouTubeApiFacade.GetYouTubeService();

		// 2. get the RSI channel
		var rsiChannel = await YouTubeApiFacade.GetChannel(youtubeService)!;

		// 3. get all RSI channel upload IDs
		var rsiUploadIds = await YouTubeApiFacade.GetUploadIds(youtubeService, rsiChannel);

		// 4. get details of each video
		var rsiUploads = await YouTubeApiFacade.GetUploadDataByIds(youtubeService, rsiUploadIds);

		// 5. update existing videos and insert new videos
		var videosToUpsert = new List<Video>();
		foreach (var video in rsiUploads)
		{
			var dbVideo = new Video();

			dbVideo.VideoId = video.Id;
			dbVideo.PublishedAt = (DateTime)video.Snippet.PublishedAtDateTimeOffset?.DateTime!;
			dbVideo.ChannelId = Options.Value.ChannelId;
			dbVideo.Title = video.Snippet.Title;
			dbVideo.Description = video.Snippet.Description ?? "N/A";
			dbVideo.Duration = video.ContentDetails.Duration;
			dbVideo.ViewCount = (long?)video.Statistics.ViewCount ?? 0;
			dbVideo.LikeCount = (long?)video.Statistics.LikeCount ?? 0;
			dbVideo.CommentCount = (long?)video.Statistics.CommentCount ?? 0;
			dbVideo.EmbedHtml = video.Player.EmbedHtml ?? "";
			dbVideo.CaptionsAvailable = video.ContentDetails.Caption == "true";

			videosToUpsert.Add(dbVideo);
		}

		var bulkConfig = new BulkConfig
			{
				PreserveInsertOrder = false,
				UpdateByProperties = [nameof(Video.VideoId)],
			};

		await DbContext.BulkInsertOrUpdateAsync(videosToUpsert, bulkConfig);

		var endTime = DateTime.Now;
		var elapsedTime = endTime - startTime;
		Log.Information($"Videos updated (time elapsed: {elapsedTime:g})");
	}



	/// <summary>
	/// Retrieves captions for all videos in the Starchives database that have captions available but not yet stored.
	/// </summary>
	/// <returns></returns>
	private async Task UpdateCaptions()
	{
		var startTime = DateTime.Now;

		var videosWithoutCaptions = await DbContext.Videos
															.Where(video => !DbContext.Captions.Any(caption => caption.VideoId == video.VideoId))
															.OrderBy(video => video.PublishedAt)
															.ToListAsync();

		var captionsToInsert = new List<Caption>();
		foreach (var video in videosWithoutCaptions)
		{

			var captionTrack = await YouTubeApiFacade.GetCaptionTrackByVideoId(video.VideoId);

			if (captionTrack == null)
			{
				continue;
			}

			// TODO: override video.CaptionsAvailable with 'true' regardless of its current value because a caption track has been discovered at this point

			foreach (var caption in captionTrack.Captions)
			{
				if (caption.Text != "\n")
				{
					var dbCaption = new Caption();

					dbCaption.VideoId = video.VideoId;
					dbCaption.Duration = caption.Duration;
					dbCaption.Offset = caption.Offset;
					dbCaption.Text = caption.Text;

					captionsToInsert.Add(dbCaption);
				}
			}
		}

		await DbContext.BulkInsertAsync(captionsToInsert);

		var endTime = DateTime.Now;
		var elapsedTime = endTime - startTime;
		Log.Information($"Captions updated (time elapsed: {elapsedTime:g})");
	}



	/// <summary>
	/// Retrieves all monthly reports and design docs from the RSI website, then updates existing documents and inserts new documents into the Starchives database.
	/// </summary>
	/// <returns></returns>
	private async Task UpdateDocuments()
	{
		// TODO: Implement monthly report update
		// TODO: Implement design docs update
		Log.Information($"Documents updated");
		await DbContext.SaveChangesAsync();
	}



	public static List<List<string>> SplitList(List<string> source, int chunkSize)
	{
		return source
			.Select((value, index) => new { value, index })
			.GroupBy(x => x.index / chunkSize)
			.Select(g => g.Select(x => x.value).ToList())
			.ToList();
	}



	public class LoginModel
	{
		public string Password { get; set; }
	}
}
