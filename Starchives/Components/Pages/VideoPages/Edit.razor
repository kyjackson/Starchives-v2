@page "/Videos/edit"

@using Microsoft.EntityFrameworkCore
@using Starchives.Models
@inject IDbContextFactory<Starchives.Data.StarchivesContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Videos</h4>
<hr />
@if (Video is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Video" OnValidSubmit="UpdateVideo" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Videos.VideosId" value="@Video.VideoId" />
                <div class="mb-3">
                    <label for="publishedat" class="form-label">PublishedAt:</label>
                    <InputDate id="publishedat" @bind-Value="Video.PublishedAt" class="form-control" />
                    <ValidationMessage For="() => Video.PublishedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="channelid" class="form-label">ChannelId:</label>
                    <InputText id="channelid" @bind-Value="Video.ChannelId" class="form-control" />
                    <ValidationMessage For="() => Video.ChannelId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Video.Title" class="form-control" />
                    <ValidationMessage For="() => Video.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Video.Description" class="form-control" />
                    <ValidationMessage For="() => Video.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="duration" class="form-label">Duration:</label>
                    <InputText id="duration" @bind-Value="Video.Duration" class="form-control" />
                    <ValidationMessage For="() => Video.Duration" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="viewcount" class="form-label">ViewCount:</label>
                    <InputNumber id="viewcount" @bind-Value="Video.ViewCount" class="form-control" />
                    <ValidationMessage For="() => Video.ViewCount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="likecount" class="form-label">LikeCount:</label>
                    <InputNumber id="likecount" @bind-Value="Video.LikeCount" class="form-control" />
                    <ValidationMessage For="() => Video.LikeCount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="commentcount" class="form-label">CommentCount:</label>
                    <InputNumber id="commentcount" @bind-Value="Video.CommentCount" class="form-control" />
                    <ValidationMessage For="() => Video.CommentCount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="embedhtml" class="form-label">EmbedHtml:</label>
                    <InputText id="embedhtml" @bind-Value="Video.EmbedHtml" class="form-control" />
                    <ValidationMessage For="() => Video.EmbedHtml" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/videos">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public string VideoId { get; set; }

    [SupplyParameterFromForm]
    public Video? Video { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Video ??= await context.Videos.FirstOrDefaultAsync(m => m.VideoId == VideoId);

        if (Video is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateVideo()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Video!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!VideoExists(Video!.VideoId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/videos");
    }

    bool VideoExists(string videoid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Videos.Any(e => e.VideoId == videoid);
    }
}
