@page "/"
@using System.Diagnostics
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Starchives</PageTitle>

@* Jumbotron card containing search bar *@
<div class="p-4 mb-4 text-white bg-dark rounded-3 searchContainer">
	<div class="p-4 container-fluid" id="search">
		<form id="searchWindow">
			<h2 class="display-6 fw heading-lg">Enter Query</h2>
			<p class="small">Simply enter a word or phrase in the search bar below to find every occurrence among all uploads on the Star Citizen Youtube channel.</p>

			@* Search bar and filters switch *@
			<div class="row justify-content-center align-items-center">
				<div class="col-6 my-4">
					<input id="searchBar" type="text" class="form-control text-center" name="query" placeholder="Search...">
				</div>

				<div class="col-1 my-4">
					<div class="form-check form-switch">
						<input id="filterSwitch" class="form-check-input" type="checkbox" role="switch">
						<label class="form-check-label" for="filterSwitch">Filters</label>
					</div>
				</div>
			</div>

			@* Filter labels *@
			<div class="filters row justify-content-center align-items-center">
				<div class="col-2">
					<span>Published:</span>
				</div>

				<div class="col-2">
					<span>Duration:</span>
				</div>

				<div class="col-2">
					<span>Order By:</span>
				</div>
			</div>

			@* Filters *@
			<div class="filters row justify-content-center align-items-center">
				<div class="col-2">
					<select id="publishDate" class="form-select text-center" aria-label="Default select example">
						<option value="" selected>Any time</option>
						<option value="2022">2022</option>
						<option value="2021">2021</option>
						<option value="2020">2020</option>
						<option value="2019">2019</option>
						<option value="2018">2018</option>
						<option value="2017">2017</option>
						<option value="2016">2016</option>
						<option value="2015">2015</option>
						<option value="2014">2014</option>
						<option value="2013">2013</option>
						<option value="2012">2012</option>
					</select>
				</div>

				<div class="col-2">
					<select id="duration" class="form-select text-center" aria-label="Default select example">
						<option value="" selected>Any duration</option>
						<option value="1">> 60 min</option>
						<option value="2">30 - 60 min</option>
						<option value="3">15 - 30 min</option>
						<option value="4">&lt; 15 min</option>
					</select>
				</div>

				<div class="col-2">
					<select id="orderBy" class="form-select text-center" aria-label="Default select example">
						<option value="1" selected>Date</option>
						<option value="2">Views</option>
						<option value="3">Likes</option>
						<option value="4">Duration</option>
					</select>
				</div>
			</div>

			@* Toggle order by descending results *@
			<div class="filters row justify-content-center align-items-center">
				<div class="col-2 mt-4 form-check">
					<input id="order" class="form-check-input mx-0" type="checkbox" value="DESC">
					<label class="form-check-label" for="order">Ascending</label>
				</div>
			</div>

			@* Search Button *@
			@* TODO: use Blazor data binding instead of JS to call search function *@
			<button id="searchButton" class="btn btn-light btn-lg mt-4" type="submit" @onclick="Search">
				<span id="loadingIcon" class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
				<span id="searchButtonLabel">Search Starchives</span>
			</button>
		</form>

		@* Search results get displayed inside this div *@
		<div id="resultsContainer" class="mx-auto justify-content-center">
			<p id="resultHeader" class="mb-0 pt-4 text-center"></p>
			<div id="results" class="pt-4 d-flex flex-column justify-content-center"></div>
		</div>

	</div>
</div>

<!-- Cards for caveats and tips -->
<div class="row align-items-md-stretch">

	<!-- Caveats card -->
	<div class="col-md-6 caveats">
		<div class="h-100 p-5 text-white bg-dark rounded-3">
			<h2 class="heading-md">Caveats</h2>
			<p class="heading-sm-1 text-start">1. <i>Captions are not always accurate.</i></p>
			<p class="ps-5 text-start">
				Due to most of the captions being auto-generated, they are not always accurate. What can be heard in a
				video will sometimes be transcribed as something unexpected by Google's caption transcription
				algorithm. This tends to occur more often in older videos.
			</p>

			<p class="heading-sm-1 text-start">2. <i>Not all searches are conclusive.</i></p>
			<p class="ps-5 text-start">
				Sometimes, a certain word or phrase can be broken up in one video's caption track and not in
				another. This can cause similar search terms to unexpectedly return different results (e.g.,
				"multicrew" and "multi crew" return different results), and in some cases one term might return
				results while a similar term returns none. If either of these occur, try rephrasing your search
				to use a different keyword, or to be less specific.
			</p>

			<p class="heading-sm-1 text-start">3. <i>Auto-generated captions only have English localization.</i></p>
			<p class="ps-5 text-start">
				Unfortunately, auto-generated captions are not available in languages other than English. If you
				are interested in volunteering to transcribe caption tracks for another language, contact me and
				I'll consider all options for adding them to the Starchives database.
			</p>
		</div>
	</div>

	<!-- Tips card -->
	<div class="col-md-6 tips">
		<div class="h-100 p-5 justify-content-left text-white bg-dark rounded-3">
			<h2 class="heading-md">Tips</h2>
			<p class="heading-sm-2 text-start"><i>Try multiple spellings when searching for a name.</i></p>
			<p class="ps-5 text-start">
				Because "Lorville" is an uncommon word, the caption generator has interpreted it
				as "lore ville," "loreville," "lor ville," and more at various occasions, so all three
				of those terms will yield different results. Such is the case for many spoken names,
				especially if they are uncommon.
			</p>

			<p class="heading-sm-2 text-start"><i>Keep the query around three words at most and four characters at least for effective searches.</i></p>
			<p class="ps-5 text-start">
				Caption lines tend to be around 6-12 words long, with the occasional exceptions for fast
				speakers. Using too many words will yield few results, and using too few characters can
				yield not only too many results, but also too many captions.
			</p>

			<p class="heading-sm-2 text-start"><i>Search without a query to get results without captions.</i></p>
			<p class="ps-5 text-start">
				If you want to find videos without getting the captions and slowing the page down too much,
				you can search without a query and use the filters to still get specific groups of videos and
				their other data, such as views and likes.
			</p>

		</div>
	</div>

</div>



@code
{
	/// <summary>
	/// TODO: Executes a call to the database to retrieve videos and captions matching the filters specified by the user.
	/// </summary>
	/// <returns></returns>
	async Task Search()
	{
		await Task.Delay(100);
		Debug.Print("Search Button was clicked");
	}



	// handle execution of the page's old script using the JS runtime
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JSRuntime.InvokeVoidAsync("console.log", "OnAfterRenderAsync was called for Home.razor");

		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("initializeHomePage");
		}
	}
}
